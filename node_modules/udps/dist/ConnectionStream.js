'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _stream = require('stream');

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _bl = require('bl');

var _bl2 = _interopRequireDefault(_bl);

var _splitBuffer = require('split-buffer');

var _splitBuffer2 = _interopRequireDefault(_splitBuffer);

var _lodash = require('lodash');

var _Packet = require('./Packet');

var _Packet2 = _interopRequireDefault(_Packet);

var ConnectionStream = (function (_Duplex) {
  _inherits(ConnectionStream, _Duplex);

  function ConnectionStream(con) {
    _classCallCheck(this, ConnectionStream);

    _get(Object.getPrototypeOf(ConnectionStream.prototype), 'constructor', this).call(this);
    this._con = con;
    this._wc = {
      buffers: [],
      callback: null,
      timers: {}
    };
    this._rc = {
      seq: 0,
      buffers: []
    };
    this.maxSize = con._windowSize * con._packetSize;
    this._wbl = new _bl2['default']();
  }

  _createClass(ConnectionStream, [{
    key: '_read',
    value: function _read(size) {}
  }, {
    key: '_write',
    value: function _write(chunk, encoding, callback) {
      var _this = this;

      this._wbl.append(chunk);
      _async2['default'].whilst(function () {
        return _this._wbl.length >= _this.maxSize;
      }, function (cb) {
        var win = _this._wbl.slice(0, _this.maxSize);
        _this._sendWindow(win, function () {
          _this._wbl.consume(win.length);
          cb();
        });
      }, function () {
        if (_this._wbl.length) {
          _this._sendWindow(_this._wbl.slice(0, _this._wbl.length), function () {
            _this._wbl.consume(_this._wbl.length);
            callback();
          });
          return;
        }
        callback();
      });
    }
  }, {
    key: '_sendWindow',
    value: function _sendWindow(buf, cb) {
      var _this2 = this;

      var buffers = (0, _splitBuffer2['default'])(buf, this._con._packetSize).map(function (v) {
        return {
          seq: _this2._con._sequence++,
          ack: false,
          data: v
        };
      });
      this._wc.buffers = buffers;
      this._wc.callback = cb;
      this._wc.timers = {};
      buffers.reverse().forEach(function (b) {
        var pkt = _Packet2['default'].createData(b.seq, b.data);
        var sender = _this2._con._send.bind(_this2._con, pkt);
        _this2._wc.timers[b.seq] = setInterval(sender, 1000);
        sender();
      });
    }
  }, {
    key: '_ack',
    value: function _ack(seq) {
      this._con._send(_Packet2['default'].createAcknowledgment(seq));
    }
  }, {
    key: '_packet',
    value: function _packet(pkt) {
      var _this3 = this;

      var type = pkt.getType();
      var seq = pkt.getSequence();
      if (type === 3) {
        if (this._readableState.length >= this.maxSize * this.maxSize) return;
        if (seq < this._rc.seq) return;
        if (seq === this._rc.seq) {
          this.push(pkt.getData());
          this._rc.seq++;
          if (!this._rc.buffers.length) return this._ack(seq);
          var next = this._rc.buffers[0];
          while (next && next.seq === this._rc.seq) {
            this.push(next.data);
            this._rc.seq++;
            this._rc.buffers.shift();
            next = this._rc.buffers[0];
          }
          this._ack(this._rc.seq - 1);
          return;
        }
        if (this._rc.buffers.length >= this._con._windowSize) return;
        this._rc.buffers.push({
          seq: seq,
          data: pkt.getData()
        });
        this._rc.buffers.sort(function (a, b) {
          return a.seq - b.seq;
        });
        return;
      }
      if (type === 4) {
        var nack = (0, _lodash.filter)(this._wc.buffers, 'ack', false);
        var cack = (0, _lodash.filter)(nack, function (v) {
          return v.seq <= seq;
        });
        if (cack.length === 0) return;
        cack.forEach(function (v) {
          clearInterval(_this3._wc.timers[v.seq]);
          v.ack = true;
        });
        if (!(nack.length - cack.length)) {
          this._wc.callback();
        }
      }
    }
  }]);

  return ConnectionStream;
})(_stream.Duplex);

exports['default'] = ConnectionStream;
module.exports = exports['default'];
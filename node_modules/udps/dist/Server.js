'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _events = require('events');

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _lodash = require('lodash');

var _PacketSocket = require('./PacketSocket');

var _PacketSocket2 = _interopRequireDefault(_PacketSocket);

var _Connection = require('./Connection');

var _Connection2 = _interopRequireDefault(_Connection);

var Server = (function (_EventEmitter) {
  _inherits(Server, _EventEmitter);

  function Server(port) {
    var _this = this;

    _classCallCheck(this, Server);

    _get(Object.getPrototypeOf(Server.prototype), 'constructor', this).call(this);
    this._connections = {};
    this._maxConnections = 16;
    this._ps = new _PacketSocket2['default'](port);['listening', 'close', 'error'].forEach(function (event) {
      _this._ps.on(event, _this.emit.bind(_this, event));
    });
    this._ps.on('packet', function (pkt, rinfo) {
      var type = pkt.getType();
      var stream = pkt.getStreamString();
      var hash = rinfo.address + rinfo.port + stream;
      var con = _this._connections[hash];

      // drop invalid packets
      if (pkt.error || stream === '00') return;

      if (type === 1) {
        if ((0, _lodash.keys)(_this._connections).length >= _this._maxConnections) return;
        _this._connections[hash] = new _Connection2['default'](_this._ps, rinfo.address, rinfo.port);
        _this._connections[hash].startTo(pkt);
        _this._connections[hash].on('ready', _this.emit.bind(_this, 'connection'));
        _this._connections[hash].on('close', function () {
          _this._connections[hash].stream.end();
          delete _this._connections[hash];
        });
      }
      if (con && type === 2) {
        con.syncTo(pkt);
      }
      if (con && type > 2 && type < 5) {
        con.handlePacket(pkt);
      }
      if (con && type === 5) {
        con.emit('close');
      }
    });
  }

  _createClass(Server, [{
    key: 'close',
    value: function close() {
      var _this2 = this;

      _async2['default'].each((0, _lodash.values)(this._connections), function (con, cb) {
        con.close(cb);
      }, function () {
        _this2._connections = {};
        _this2._ps.close();
      });
    }
  }]);

  return Server;
})(_events.EventEmitter);

exports['default'] = Server;
module.exports = exports['default'];
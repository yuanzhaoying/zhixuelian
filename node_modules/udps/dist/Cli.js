'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _ = require('./');

var _2 = _interopRequireDefault(_);

var help = '  udps - a secure application protocol build on udp\n\n  Usage:\n      udps <options> [server]\n  Options:\n      -s, --server <port> Starts a server on the given port\n      -h, --help          Output this help info\n  Examples:\n      udps -s 1337\n      udps 127.0.0.1 1337\n';

exports['default'] = function (argv) {
  var args = (0, _minimist2['default'])(argv, {
    alias: {
      help: 'h',
      server: 's'
    }
  });
  if (args.help) {
    console.log(help);
    return;
  }
  if (args.server) {
    var _ret = (function () {
      if (typeof args.server !== 'number') return {
          v: console.error('invalid port')
        };
      var server = new _2['default'].Server(args.server);
      server.on('listening', function () {
        process.on('SIGINT', function () {
          server.close(function () {
            return process.exit();
          });
        });
        console.error('server started on port', args.server);
      });
      server.on('connection', function (con) {
        console.error('new connection from', con.address);
        con.on('close', function () {
          console.error('connection closed from', con.address);
        });
        process.stdin.pipe(con.stream).pipe(process.stdout);
      });
      server.on('close', function () {
        console.error('server closed');
        process.exit();
      });
      return {
        v: undefined
      };
    })();

    if (typeof _ret === 'object') return _ret.v;
  }
  if (args._.length === 0) {
    return console.error('server and port missing');
  }
  var address = args._.shift();
  var port = null;
  if (/:\d+$/.test(address)) {
    var con = address.split(':');
    address = con[0];
    port = con[1];
  }
  if (!port && args._.length > 0) port = parseInt(args._.shift(), 10);
  if (!address || !port || isNaN(port)) return console.error('invalid address or port');
  console.error('connecting to', address, port);
  var client = new _2['default'].Client(address, port);
  client.on('ready', function (con) {
    console.error('connection ready');
    process.on('SIGINT', function () {
      return client.close();
    });
    process.stdin.pipe(con.stream).pipe(process.stdout);
  });
  client.on('close', function () {
    console.error('connection closed');
    process.exit();
  });
};

module.exports = exports['default'];
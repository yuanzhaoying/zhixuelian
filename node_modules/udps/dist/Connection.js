'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _events = require('events');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _Packet = require('./Packet');

var _Packet2 = _interopRequireDefault(_Packet);

var _ConnectionStream = require('./ConnectionStream');

var _ConnectionStream2 = _interopRequireDefault(_ConnectionStream);

var Connection = (function (_EventEmitter) {
  _inherits(Connection, _EventEmitter);

  function Connection(ps, address, port) {
    _classCallCheck(this, Connection);

    _get(Object.getPrototypeOf(Connection.prototype), 'constructor', this).call(this);
    this._streamid = null;
    this._sequence = 0;
    this._ps = ps;
    this._windowSize = 32;
    this._packetSize = 450;
    this.address = address;
    this.port = port;
    this.ready = false;
    this._auth = {};
    this._auth.curve = 'secp521r1';
    this._auth.cipher = 'aes-256-gcm';
    this._auth.ecdh = null;
    this._auth.secret = null;
    this._auth.retryTimer = null;
    this.stream = new _ConnectionStream2['default'](this);
  }

  _createClass(Connection, [{
    key: 'getStreamId',
    value: function getStreamId() {
      return this._streamid && this._streamid.toString('hex');
    }
  }, {
    key: 'initECDH',
    value: function initECDH() {
      this._auth.ecdh = _crypto2['default'].createECDH(this._auth.curve);
      this._auth.ecdh.generateKeys();
      return _Packet2['default'].createAuthentication(this._auth.ecdh.getPublicKey(), this._auth.curve, this._auth.cipher);
    }
  }, {
    key: 'initiate',
    value: function initiate() {
      this._streamid = _crypto2['default'].randomBytes(8);
      this._send(this.initECDH());
      this._auth.retryTimer = setTimeout(this.initiate.bind(this), 1000);
    }
  }, {
    key: '_setSecret',
    value: function _setSecret(data) {
      this._secret = _crypto2['default'].createHash('sha256').update(this._auth.ecdh.computeSecret(data)).digest();
    }
  }, {
    key: '_hmac',
    value: function _hmac(str) {
      return _crypto2['default'].createHmac('sha256', this._secret).update(str).digest();
    }
  }, {
    key: 'startTo',
    value: function startTo(pkt) {
      this._streamid = pkt.getStream();
      var authentication = pkt.getAuthentication();
      this._auth.curve = authentication.curve;
      this._auth.cipher = authentication.cipher;
      this._send(this.initECDH());
      this._setSecret(pkt.getData());
    }
  }, {
    key: 'startFrom',
    value: function startFrom(pkt) {
      this._setSecret(pkt.getData());
      var sync = _Packet2['default'].creatSynchronization();
      sync.setData(this._hmac('UDPS'));
      this._encryptPkt(sync);
      this._send(sync);
    }
  }, {
    key: '_encryptPkt',
    value: function _encryptPkt(pkt) {
      var odata = pkt.getData();
      if (!odata || pkt.getProtocol() !== 1) return pkt;
      pkt.setEncrypted();
      var iv = _crypto2['default'].randomBytes(12);
      var ciph = _crypto2['default'].createCipheriv(this._auth.cipher, this._secret, iv);
      var data = [ciph.update(odata)];
      var fin = ciph.final();
      if (fin) data.push(fin);
      pkt.setData(Buffer.concat(data));
      pkt.setIv(iv);
      pkt.setAuthtag(ciph.getAuthTag());
      return pkt;
    }
  }, {
    key: '_decryptPkt',
    value: function _decryptPkt(pkt) {
      var odata = pkt.getData();
      if (!odata || pkt.getProtocol() !== 2) return pkt;
      pkt.setRaw();
      var dciph = _crypto2['default'].createDecipheriv(this._auth.cipher, this._secret, pkt.getIv());
      dciph.setAuthTag(pkt.getAuthtag());
      var data = [dciph.update(odata)];
      var fin = dciph.final();
      if (fin) data.push(fin);
      pkt.setData(Buffer.concat(data));
      return pkt;
    }
  }, {
    key: '_send',
    value: function _send(pkt, cb) {
      if (this.ready) this._encryptPkt(pkt);
      pkt.setStream(this._streamid);
      this._ps.send(this.address, this.port, pkt, cb);
    }
  }, {
    key: 'syncTo',
    value: function syncTo(pkt) {
      var _this = this;

      this._decryptPkt(pkt);
      var hmac = this._hmac('UDPS');
      if (hmac.toString('hex') !== pkt.getData().toString('hex')) return;
      this.ready = true;
      var sync = _Packet2['default'].creatSynchronization();
      sync.setData(hmac);
      this._send(sync, function () {
        return _this.emit('ready', _this);
      });
    }
  }, {
    key: 'syncFrom',
    value: function syncFrom(pkt) {
      this._decryptPkt(pkt);
      if (this._hmac('UDPS').toString('hex') !== pkt.getData().toString('hex')) return;
      this.ready = true;
      clearTimeout(this._auth.retryTimer);
      this.emit('ready', this);
    }
  }, {
    key: 'handlePacket',
    value: function handlePacket(pkt, rinfo) {
      if (!this.ready) return;
      this._decryptPkt(pkt);
      this.stream._packet(pkt);
    }
  }, {
    key: 'close',
    value: function close(cb) {
      var _this2 = this;

      if (!this.ready) return;
      this._send(_Packet2['default'].createFinalize(), function () {
        _this2.emit('close');
        if (typeof cb === 'function') cb();
      });
    }
  }]);

  return Connection;
})(_events.EventEmitter);

exports['default'] = Connection;
module.exports = exports['default'];